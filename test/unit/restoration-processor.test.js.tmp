/**
 * Compact unit test shim - runs core RestorationProcessor flows in a single test
 * This reduces the chance of node:test worker serialization races by keeping
 * operations in-process and waiting briefly for background activity to settle.
 */
import { it } from 'node:test';
// Ensure console arguments are serialized immediately to avoid node:test structured-clone issues
import '../../test/helpers/safe-console.js';
import exceptionDumpPath from '../../test/helpers/exception-dump.js';
import assert from 'node:assert';
import { join } from 'path';
import { RestorationProcessor } from '../../src/lib/processors/restoration-processor.js';
import { FSUtils } from '../../src/lib/utils/fs-utils.js';

it('restoration-processor: core scenarios (single-run)', async () => {
  const processor = new RestorationProcessor();
  const originalCwd = process.cwd();
  const testDir = join(originalCwd, 'test-temp-restoration');
  try {
    await FSUtils.ensureDir(testDir);
    process.chdir(testDir);

    // Scenario 1: restore-file
    await FSUtils.writeFileAtomic('package.json', '{"name": "{{PROJECT_NAME}}"}');
    let plan = { mode: 'full', actions: [{ type: 'restore-file', path: 'package.json', content: '{"name": "my-project"}', placeholderReplacements: [{ from: '{{PROJECT_NAME}}', to: 'my-project' }] }], missingValues: [], warnings: [] };
    let result = await processor.executePlan(plan);
    assert.strictEqual(result.success, true, 'restore-file failed');

    // Scenario 2: recreate-file
    plan = { mode: 'full', actions: [{ type: 'recreate-file', path: '.env', content: 'DATABASE_URL=postgres://localhost:5432/mydb' }], missingValues: [], warnings: [] };
    result = await processor.executePlan(plan);
    assert.strictEqual(result.success, true, 'recreate-file failed');

    // Scenario 3: recreate-directory
    plan = { mode: 'full', actions: [{ type: 'recreate-directory', path: 'node_modules', content: null, regenerationCommand: 'npm install' }], missingValues: [], warnings: [] };
    result = await processor.executePlan(plan);
    assert.strictEqual(result.success, true, 'recreate-directory failed');

    // Scenario 4: preserve-file
    await FSUtils.writeFileAtomic('template.json', '{"name": "test-template"}');
    await FSUtils.writeFileAtomic('_setup.mjs', 'console.log("setup");');
    plan = { mode: 'full', actions: [{ type: 'preserve-file', path: 'template.json' }, { type: 'preserve-file', path: '_setup.mjs' }], missingValues: [], warnings: [] };
    result = await processor.executePlan(plan);
    assert.strictEqual(result.success, true, 'preserve-file failed');

    // Basic assertions
    const pjson = await FSUtils.readFile('package.json');
    assert.strictEqual(pjson, '{"name": "my-project"}');
    assert.strictEqual(await FSUtils.exists('.env'), true);
    assert.strictEqual(await FSUtils.exists('node_modules'), true);
    const setupContent = await FSUtils.readFile('_setup.mjs');
    assert.strictEqual(setupContent, 'console.log("setup");');

    // Wait briefly to let background work settle
    await new Promise(resolve => setTimeout(resolve, 100));

  } finally {
    try { process.chdir(originalCwd); } catch (e) {}
    try { await FSUtils.remove(testDir); } catch (e) {}
  }
});
