/**
 * Template Metadata Generator
 * 
 * Generates template.json with placeholder definitions and project type information.
 */

/** @typedef {import('@m5nv/create-scaffold/types/template-schema').TemplateManifest} TemplateManifest */

export class MetadataGenerator {
  constructor() {
    // No initialization needed
  }

  async generateMetadata(analysis, options) {
    const { projectType, placeholders, targetFiles } = analysis;

    // Create placeholder definitions for template.json
    // Note: template.json schema requires placeholder names to be in {{NAME}} format
    const placeholderDefinitions = placeholders.map(p => {
      const def = {
        name: `{{${p.name}}}`,
        description: this.getPlaceholderDescription(p.name),
        required: this.isPlaceholderRequired(p.name),
        type: "string",
        sensitive: false
      };
      const defaultValue = this.getPlaceholderDefault(p.name);
      if (defaultValue !== null) {
        def.default = defaultValue;
      }
      return def;
    });

    const supportedOptions = this.getSupportedOptions(projectType);
    const metadata = {
      name: "Generated Template",
      description: `A ${projectType} project template generated by @m5nv/make-template`,
      handoff: this.getHandoffSteps(projectType),
      setup: {
        authoringMode: "wysiwyg",
        supportedOptions: supportedOptions,
        dimensions: {
          features: {
            type: "multi",
            values: supportedOptions,
            description: "Select the features to include in your project"
          }
        }
      },
      metadata: {
        type: projectType,
        version: "1.0.0",
        placeholders: placeholderDefinitions,
        files: targetFiles,
        createdBy: "@m5nv/make-template",
        createdAt: new Date().toISOString()
      }
    };

    return JSON.stringify(metadata, null, 2);
  }

  getPlaceholderDescription(placeholderName) {
    const descriptions = {
      'PROJECT_NAME': 'The name of the project',
      'PROJECT_DESCRIPTION': 'A brief description of the project',
      'AUTHOR': 'The author or maintainer of the project',
      'README_TITLE': 'The title shown in the README file',
      'WORKER_NAME': 'The name of the Cloudflare Worker',
      'CLOUDFLARE_ACCOUNT_ID': 'Your Cloudflare account ID',
      'BASE_URL': 'The base URL for the Vite application',
      'HTML_TITLE': 'The title shown in the browser tab'
    };

    return descriptions[placeholderName] || `Value for ${placeholderName}`;
  }

  isPlaceholderRequired(placeholderName) {
    const requiredPlaceholders = [
      'PROJECT_NAME',
      'WORKER_NAME',
      'CLOUDFLARE_ACCOUNT_ID'
    ];

    return requiredPlaceholders.includes(placeholderName);
  }

  getPlaceholderDefault(placeholderName) {
    const defaults = {
      'PROJECT_DESCRIPTION': null,
      'AUTHOR': null,
      'README_TITLE': null,
      'BASE_URL': '/',
      'HTML_TITLE': 'My App'
    };

    return defaults[placeholderName] || null;
  }

  getSupportedOptions(projectType) {
    const optionsByType = {
      'cf-d1': ['database', 'auth', 'cors'],
      'cf-turso': ['database', 'auth', 'cors'],
      'vite-react': ['typescript', 'testing', 'eslint', 'prettier'],
      'generic': ['testing', 'eslint', 'prettier', 'docs']
    };

    return optionsByType[projectType] || ['testing', 'docs'];
  }

  getHandoffSteps(projectType) {
    const stepsByType = {
      'cf-d1': ['npm install', 'wrangler deploy'],
      'cf-turso': ['npm install', 'wrangler deploy'],
      'vite-react': ['npm install', 'npm run dev'],
      'generic': ['npm install']
    };

    return stepsByType[projectType] || ['npm install'];
  }
} export default MetadataGenerator;