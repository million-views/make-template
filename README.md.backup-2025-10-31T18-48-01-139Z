# {{README_TITLE}}
Convert existing Node.js projects into reusable templates compatible with @m5nv/create-scaffold

## Quick Start
```bash
# One-time usage (recommended)
npx {{README_TITLE}}

# Or install globally
npm install -g {{README_TITLE}}
make-template

# Preview changes first
npx {{README_TITLE}} --dry-run
```

## Key Features
- ‚úÖ **Zero dependencies** - Pure Node.js implementation for maximum security
- ‚úÖ **Smart project detection** - Automatically identifies Cloudflare Workers, Vite, and Node.js projects
- ‚úÖ **Safe placeholder replacement** - Converts project-specific values to template placeholders
- ‚úÖ **Intelligent cleanup** - Removes build artifacts while preserving essential source code
- ‚úÖ **Template restoration** - Reverse conversion to restore working project state for development
- ‚úÖ **Create-scaffold ready** - Generates _setup.mjs and template.json for seamless integration

## Usage Examples

### Basic Conversion
```bash
# Convert current directory to template
npx {{README_TITLE}}

# Expected output:
‚úÖ Detected project type: vite-react
‚úÖ Found 3 placeholders: PROJECT_NAME, PROJECT_DESCRIPTION, HTML_TITLE
‚úÖ Generated _setup.mjs and template.json
‚úÖ Template conversion complete!
```

### Preview Mode
```bash
# See what changes will be made
npx {{README_TITLE}} --dry-run

# Shows planned changes without executing:
üìã Planned Changes:
  üìù package.json: "my-app" ‚Üí "{{PROJECT_NAME}}"
  üìù index.html: "My App" ‚Üí "{{HTML_TITLE}}"
  üóëÔ∏è Remove: node_modules, .git, dist/
  üìÑ Create: _setup.mjs, template.json
```

### Advanced Options
```bash
# Skip confirmation prompts
npx {{README_TITLE}} --yes

# Force specific project type
npx {{README_TITLE}} --type cf-d1

# Use custom placeholder format
npx {{README_TITLE}} --placeholder-format "__NAME__"
```

## CLI Options

| Option | Description | Example |
|--------|-------------|---------|
| `--dry-run` | Preview changes without executing | `--dry-run` |
| `--yes` | Skip confirmation prompts | `--yes` |
| `--type <type>` | Force project type detection | `--type vite-react` |
| `--placeholder-format <format>` | Custom placeholder format | `--placeholder-format "%NAME%"` |
| `--help` | Show usage information | `--help` |

### Supported Project Types
- `cf-d1` - Cloudflare Workers with D1 database
- `cf-turso` - Cloudflare Workers with Turso database
- `vite-react` - Vite-based React applications
- `generic` - Generic Node.js projects (fallback)

## Template Restoration

The restoration feature allows template authors to reverse template conversion, returning a templatized project back to a working state. This enables efficient template development and testing workflows.

### Restoration Options

| Option | Description | Example |
|--------|-------------|---------|
| `--restore` | Restore template to working project | `--restore` |
| `--restore-files <files>` | Restore only specific files | `--restore-files "package.json,README.md"` |
| `--restore-placeholders` | Restore only placeholder values | `--restore-placeholders` |
| `--sanitize-undo` | Remove sensitive data from undo log | `--sanitize-undo` |
| `--generate-defaults` | Create restoration defaults file | `--generate-defaults` |

### Template Author Workflow

```bash
# 1. Convert working project to template
npx {{README_TITLE}}

# 2. Test template with create-scaffold
npx @m5nv/create-scaffold my-template test-project

# 3. Find issues, restore to working state
npx {{README_TITLE}} --restore

# 4. Fix issues in working project
# Edit files, test functionality

# 5. Update template with fixes
npx {{README_TITLE}}
```

### Restoration Examples

```bash
# Preview restoration changes
npx {{README_TITLE}} --restore --dry-run

# Full restoration (restore everything)
npx {{README_TITLE}} --restore

# Selective file restoration
npx {{README_TITLE}} --restore-files "package.json,wrangler.jsonc"

# Restore only placeholder values
npx {{README_TITLE}} --restore-placeholders

# Generate defaults for automated restoration
npx {{README_TITLE}} --generate-defaults
```

### Undo Log Management

The `.template-undo.json` file contains restoration data for template authors:

**For Template Development:**
```bash
# Keep undo log for development workflow
git add .template-undo.json
git commit -m "Add template with restoration data"
```

**For Public Templates:**
```bash
# Use sanitized undo log for privacy
npx {{README_TITLE}} --sanitize-undo

# Or exclude from repository
echo ".template-undo.json" >> .gitignore
```

**Undo Log Best Practices:**
- ‚úÖ Safe to commit for template maintenance
- ‚úÖ create-scaffold ignores .template-undo.json automatically
- ‚úÖ Use `--sanitize-undo` to remove sensitive information
- ‚úÖ Keep for template development, gitignore for public templates
- ‚úÖ Use `.restore-defaults.json` for automated restoration

### Sanitization and Privacy

Protect sensitive information when sharing templates:

```bash
# Create template with sanitized undo log
npx {{README_TITLE}} --sanitize-undo --dry-run

# Generate defaults file for restoration
npx {{README_TITLE}} --generate-defaults

# Edit .restore-defaults.json with safe defaults
{
  "defaults": {
    "{{PROJECT_NAME}}": "${PWD##*/}",
    "{{AUTHOR_NAME}}": "${USER}",
    "{{AUTHOR_EMAIL}}": "dev@example.com"
  }
}

# Restore using defaults (no prompts)
npx {{README_TITLE}} --restore
```

**Sanitization removes:**
- Email addresses and personal identifiers
- File paths containing usernames
- API keys and sensitive configuration values
- Author names and personal information

**Sanitization preserves:**
- File operation records
- Placeholder mapping structure
- Template functionality
- Restoration capability

### Troubleshooting Restoration

**Undo log not found:**
```bash
# Solution: Create template first
npx {{README_TITLE}}
```

**Missing values during restoration:**
```bash
# Solution: Create defaults file
npx {{README_TITLE}} --generate-defaults

# Edit .restore-defaults.json with your values
# Then restore
npx {{README_TITLE}} --restore
```

**File conflicts during restoration:**
```bash
# Solution: Preview first, then selective restore
npx {{README_TITLE}} --restore --dry-run
npx {{README_TITLE}} --restore-files "package.json"
```

**Sanitized restoration prompts:**
```bash
# Solution: Use defaults or placeholder-only restore
npx {{README_TITLE}} --restore-placeholders
```

## Installation

### NPX (Recommended)
```bash
# Run once without installation
npx {{README_TITLE}}
```

### Global Installation
```bash
# Install globally for repeated use
npm install -g {{README_TITLE}}
make-template
```

### Requirements
- Node.js 18+ (ESM support required)
- Project must have package.json file
- Git repository (optional, will be cleaned up)

## How It Works

1. **Analyzes** your project structure and detects project type
2. **Identifies** project-specific values in configuration files
3. **Replaces** values with placeholders ({{PROJECT_NAME}}, etc.)
4. **Cleans up** build artifacts, dependencies, and version control
5. **Generates** _setup.mjs and template.json for create-scaffold compatibility

## Generated Files

### _setup.mjs
```javascript
export default async function setup({ ctx, tools }) {
  await tools.placeholders.replaceAll({
    PROJECT_NAME: ctx.projectName,
    PROJECT_DESCRIPTION: ctx.projectDescription || ctx.projectName
  }, ['package.json', 'README.md']);
}
```

### template.json
```json
{
  "name": "My Template",
  "setup": { "supportedOptions": [] },
  "metadata": {
    "type": "vite-react",
    "placeholders": [
      { "name": "{{PROJECT_NAME}}", "required": true }
    ]
  }
}
```

## Safety Features

- **Dry run mode** - Preview all changes before execution
- **Confirmation prompts** - Explicit approval for destructive operations
- **Essential file preservation** - Never removes source code or configurations
- **Path validation** - Prevents operations outside project directory

## Development

```bash
# Clone and install
git clone https://github.com/m5nv/make-template.git
cd make-template
npm install

# Run comprehensive test suite
npm test

# Run specific test categories
npm run test:unit        # Unit tests
npm run test:integration # Integration tests
npm run test:functional  # End-to-end CLI tests

# Development mode
npm run dev -- --dry-run

# Validate before publishing
npm run validate

## Testing

Run the project's test suite locally and in CI. The test harness uses a guard to avoid accidental execution against real projects; set the required environment variable when running tests locally.

Local (recommended):
```bash
# Required when running tests locally
export MAKE_TEMPLATE_TEST_INPUT=1
npm test
```

Notes for CI:
- The repository includes a GitHub Actions workflow at `.github/workflows/ci.yml` which sets `MAKE_TEMPLATE_TEST_INPUT=1` before running `npm test`.
- This ensures CI runs match the guarded test environment used locally.

If you need ad-hoc debug artifacts during deep troubleshooting, ask explicitly and we can add a gated debug writer that writes to `test-output/` only when a debug flag is enabled.
```

## Publishing

```bash
# Test package before publishing
npm run publish:dry

# Publish beta version
npm run publish:beta

# Publish stable release
npm run publish:latest
```

## License

MIT